Index: app/src/main/java/com/infinity/dsmabsen/ui/fragment/PengajuanReimbursementFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.infinity.dsmabsen.ui.fragment\r\n\r\nimport DataSpinnerAdapter\r\nimport android.Manifest\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.graphics.drawable.BitmapDrawable\r\nimport android.location.LocationManager\r\nimport android.net.Uri\r\nimport android.os.Bundle\r\nimport android.provider.MediaStore\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.AdapterView\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.appcompat.widget.Toolbar\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport com.infinity.dsmabsen.R\r\nimport com.infinity.dsmabsen.databinding.FragmentPengajuanReimbursementBinding\r\nimport com.infinity.dsmabsen.helper.handleApiError\r\nimport com.infinity.dsmabsen.model.DataX\r\nimport com.infinity.dsmabsen.model.DataXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\nimport com.infinity.dsmabsen.repository.NetworkResult\r\nimport com.infinity.dsmabsen.ui.activity.MainActivity\r\nimport com.infinity.dsmabsen.ui.viewModel.ReimbursementViewModel\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport io.paperdb.Paper\r\nimport okhttp3.MediaType.Companion.toMediaTypeOrNull\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody.Companion.toRequestBody\r\nimport java.io.ByteArrayOutputStream\r\n\r\n@AndroidEntryPoint\r\nclass PengajuanReimbursementFragment :\r\n    BaseFragment<FragmentPengajuanReimbursementBinding>(FragmentPengajuanReimbursementBinding::inflate) {\r\n    private lateinit var adapter: DataSpinnerAdapter\r\n    private lateinit var locationManager: LocationManager\r\n\r\n    private val GALLERY_PERMISSION_CODE = 101\r\n\r\n    // Konstanta untuk kode permintaan gambar\r\n    private val CAMERA_REQUEST_CODE = 200\r\n    private val GALLERY_REQUEST_CODE = 201\r\n\r\n    private var selectedJenisReimbursement: DataXXXXXXXXXXXXXXXXXXXXXXXXXXX? = null\r\n    var kodeReimbursement2: String? = null\r\n    val viewModel: ReimbursementViewModel by viewModels()\r\n    val savedUser = Paper.book().read<DataX>(\"user\")\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        hideBottomNavigation()\r\n        setHasOptionsMenu(true)\r\n        setupToolbar(\"Ajukan Reimbursement\")\r\n        binding.apply {\r\n            val myActivities = activity as MainActivity\r\n            myActivities.hideMyBottomNav()\r\n            addImage.setOnClickListener {\r\n                uploadFiles()\r\n            }\r\n\r\n            viewModel.requestSpinnerReimbursement()\r\n            viewModel.getSpinnerReimbursementLiveData.observe(viewLifecycleOwner) {\r\n                when (it) {\r\n                    is NetworkResult.Success -> {\r\n                        loadingInclude.loading.visibility = View.GONE\r\n                        val response = it.data!!\r\n                        val data = response.data\r\n                        adapter = DataSpinnerAdapter(requireContext(), data)\r\n                        spinnerJenisReimbursement.adapter = adapter\r\n                        spinnerJenisReimbursement.onItemSelectedListener =\r\n                            object : AdapterView.OnItemSelectedListener {\r\n                                override fun onItemSelected(\r\n                                    parent: AdapterView<*>?, view: View?, position: Int, id: Long\r\n                                ) {\r\n                                    val clickedItem: DataXXXXXXXXXXXXXXXXXXXXXXXXXXX =\r\n                                        parent?.getItemAtPosition(position) as DataXXXXXXXXXXXXXXXXXXXXXXXXXXX\r\n                                    val kodeReimbursement = clickedItem.kode_reimbursement\r\n                                    kodeReimbursement2 = kodeReimbursement\r\n                                }\r\n\r\n                                override fun onNothingSelected(p0: AdapterView<*>?) {\r\n                                    selectedJenisReimbursement = null\r\n                                }\r\n\r\n                            }\r\n                    }\r\n\r\n                    is NetworkResult.Loading -> {\r\n                        loadingInclude.loading.visibility = View.VISIBLE\r\n\r\n                    }\r\n\r\n                    is NetworkResult.Error -> {\r\n                        loadingInclude.loading.visibility = View.GONE\r\n                        handleApiError(it.message)\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        toolbar.setOnMenuItemClickListener { menuItem ->\r\n            var i = 0\r\n            when (menuItem.itemId) {\r\n                R.id.save -> {\r\n                    if (binding.edtNominal.text.isEmpty()) {\r\n                        binding.edtNominal.error = \"Harap isi bidang ini!!\"\r\n                        binding.edtNominal.requestFocus()\r\n                        i++\r\n                    }\r\n                    if (binding.edtKeterangan.text.isEmpty()) {\r\n                        binding.edtKeterangan.error = \"Harap isi bidang ini!!\"\r\n                        binding.edtKeterangan.requestFocus()\r\n                        i++\r\n                    }\r\n                    if (binding.imgUpload.drawable.constantState == resources.getDrawable(R.drawable.take_a_photo).constantState) {\r\n                        AlertDialog.Builder(requireContext())\r\n                            .setTitle(\"Peringatan!!\")\r\n                            .setMessage(\"Silahkan ambil gambar terlebih dahulu\")\r\n                            //    .setIcon(R.drawable.ic_warning)\r\n                            .setPositiveButton(\"Ok\") { _, _ ->\r\n                            }\r\n                            .create().show()\r\n                        i++\r\n                    }\r\n\r\n//                    if (args.codeBarcode == \"\" || args.codeBarcode.isEmpty()) {\r\n//                        Toast.makeText(requireContext(), \"args kosong\", Toast.LENGTH_SHORT).show()\r\n//                        i++\r\n//                    }\r\n\r\n                    if (i == 0) {\r\n                        saveReimbursement(savedUser)\r\n                    }\r\n                    true\r\n                }\r\n//\r\n//                R.id.scan -> {\r\n//                    scanBarcode()\r\n//                    true\r\n//                }\r\n\r\n                else -> false\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun uploadFiles() {\r\n        val pictureDialog = AlertDialog.Builder(requireContext())\r\n        pictureDialog.setTitle(\"Select Action\")\r\n        val pictureDialogItems = arrayOf(\"Take Photo With Camera\", \"Select Photo From Gallery\")\r\n        pictureDialog.setItems(pictureDialogItems) { _, which ->\r\n            when (which) {\r\n                0 -> takePictureFromCamera()\r\n                1 -> choosePictureFromGallery()\r\n            }\r\n        }\r\n        pictureDialog.show()\r\n    }\r\n\r\n    private fun takePictureFromCamera() {\r\n        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\r\n        putPhoto.launch(intent)\r\n//        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\r\n//        startActivityForResult(intent, CAMERA_REQUEST_CODE)\r\n    }\r\n\r\n    private fun choosePictureFromGallery() {\r\n        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\r\n        putImage.launch(intent)\r\n//        val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)\r\n//        startActivityForResult(intent, GALLERY_REQUEST_CODE)\r\n    }\r\n\r\n    private val putImage =\r\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {\r\n            if (it.resultCode == Activity.RESULT_OK) {\r\n                try {\r\n                    val imageUri = it?.data?.data\r\n                    binding.imgUpload.setImageURI(imageUri)\r\n                    binding.imgUpload.visibility = View.VISIBLE\r\n                } catch (e: Exception) {\r\n                    Toast.makeText(requireContext(), \"Gagal memuat gambar\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n\r\n    private val putPhoto =\r\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {\r\n            if (it.resultCode == AppCompatActivity.RESULT_OK) {\r\n                val bitmap = it?.data?.extras?.get(\"data\") as Bitmap\r\n                binding.imgUpload.setImageBitmap(bitmap)\r\n                binding.imgUpload.visibility = View.VISIBLE\r\n            } else if (it == null) {\r\n//                binding.imageView.setImageResource(R.drawable.ic_launcher_background)\r\n                binding.imgUpload.visibility = View.GONE\r\n            } else {\r\n                Log.d(\"TAG\", \"Task Cancelled\")\r\n//                Toast.makeText(this, \"Task Cancelled\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n    override fun onCreateOptionsMenu(menu: Menu, inflater: MenuInflater) {\r\n        inflater.inflate(R.menu.toolbar_menu, menu)\r\n        val menuSave = menu.findItem(R.id.save)\r\n        val menuPlus = menu.findItem(R.id.add)\r\n        val menuLogout = menu.findItem(R.id.logout)\r\n        val menuScan = menu.findItem(R.id.scan)\r\n\r\n        menuScan.isVisible = false\r\n        menuLogout.isVisible = false\r\n        menuSave?.isVisible = true\r\n        menuPlus?.isVisible = false\r\n\r\n    }\r\n\r\n    private fun saveReimbursement(savedUser: DataX?) {\r\n\r\n        Log.d(\"click send reimbursement\", \"here\")\r\n        AlertDialog.Builder(requireContext())\r\n            .setMessage(\"Anda yakin ingin mengajukan reimbursement\")\r\n            //    .setIcon(R.drawable.ic_warning)\r\n            .setPositiveButton(\"Ya\") { _, _ ->\r\n                val nipRequestBody = MultipartBody.Part.createFormData(\"nip\", savedUser!!.nip)\r\n                val kodeReimbursementRequestBody =\r\n                    MultipartBody.Part.createFormData(\"kode_reimbursement\", kodeReimbursement2!!)\r\n                val nominalRequestBody =\r\n                    MultipartBody.Part.createFormData(\r\n                        \"nilai\",\r\n                        binding.edtNominal.text.toString()\r\n                    )\r\n                val keteranganRequestBody =\r\n                    MultipartBody.Part.createFormData(\r\n                        \"keterangan\",\r\n                        binding.edtKeterangan.text.toString()\r\n                    )\r\n\r\n                val bitmap: Bitmap = (binding.imgUpload.drawable as BitmapDrawable).bitmap\r\n                val photo = uriToMultipartBody(bitmap)\r\n                Log.d(\"sendData\", savedUser!!.nip)\r\n                Log.d(\r\n                    \"saveReimbursement\",\r\n                    \"nip = $nipRequestBody \\n \" +\r\n                            \"kodeReimbursement = $kodeReimbursementRequestBody \\n\" +\r\n                            \"nominal = $nominalRequestBody \\n\" +\r\n                            \"photo =  $photo \\n\" +\r\n                            \"keterangan = $keteranganRequestBody\"\r\n                )\r\n                viewModel.requestPengajuanReimbursement(\r\n                    nipRequestBody.body,\r\n                    kodeReimbursementRequestBody.body,\r\n                    nominalRequestBody.body,\r\n                    photo,\r\n                    keteranganRequestBody.body\r\n                )\r\n                viewModel.getPengajuanLiveData.observe(viewLifecycleOwner) {\r\n                    when (it) {\r\n                        is NetworkResult.Success -> {\r\n                            binding.apply {\r\n                                binding.loadingInclude.loading.visibility = View.GONE\r\n                                scrollView2.visibility = View.VISIBLE\r\n                            }\r\n                            val response = it.data!!\r\n                            val messages = response.data.messages\r\n                            val builders = AlertDialog.Builder(requireContext())\r\n                            Log.d(\"pesan\", messages)\r\n                            builders.setMessage(messages)\r\n                                .setNegativeButton(\"Ya\") { dialog, _ ->\r\n                                    dialog.cancel()\r\n                                }\r\n                            val alert = builders.create()\r\n                            alert.show()\r\n                            findNavController().popBackStack()\r\n//                            requireActivity().onBackPressed()\r\n                        }\r\n\r\n                        is NetworkResult.Loading -> {\r\n                            binding.apply {\r\n                                scrollView2.visibility = View.GONE\r\n                                binding.loadingInclude.loading.visibility = View.VISIBLE\r\n                            }\r\n                        }\r\n\r\n                        is NetworkResult.Error -> {\r\n                            binding.apply {\r\n                                scrollView2.visibility = View.VISIBLE\r\n                                binding.loadingInclude.loading.visibility = View.GONE\r\n                            }\r\n                            handleApiError(it.message)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            .setNegativeButton(\"Tidak\") { dialog, _ ->\r\n                dialog.dismiss()\r\n            }\r\n            .create().show()\r\n    }\r\n\r\n    private fun uriToMultipartBody(bitmap: Bitmap): MultipartBody.Part {\r\n        val byteArrayOutputStream = ByteArrayOutputStream()\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream)\r\n        val byteArray = byteArrayOutputStream.toByteArray()\r\n        val requestFile = byteArray.toRequestBody(\"image/png\".toMediaTypeOrNull())\r\n        return MultipartBody.Part.createFormData(\"file\", \"image.png\", requestFile)\r\n    }\r\n\r\n    override fun onConnectionAvailable() {\r\n        super.onConnectionAvailable()\r\n        binding.apply {\r\n            toolbar.toolbar.visibility = View.VISIBLE\r\n            scrollView2.visibility = View.VISIBLE\r\n            noInternetConnection.ivNoConnection.visibility = View.GONE\r\n        }\r\n    }\r\n\r\n    override fun onConnectionLost() {\r\n        super.onConnectionLost()\r\n        binding.apply {\r\n            toolbar.toolbar.visibility = View.GONE\r\n            scrollView2.visibility = View.GONE\r\n            noInternetConnection.ivNoConnection.visibility = View.VISIBLE\r\n        }\r\n    }\r\n\r\n    override fun onResume() {\r\n        Log.d(\"TAG\", \"onResume: \")\r\n        hideBottomNavigation()\r\n        val myActivities = activity as MainActivity\r\n        myActivities.hideMyBottomNav()\r\n        super.onResume()\r\n    }\r\n\r\n    override fun onStart() {\r\n        Log.d(\"TAG\", \"onStart: \")\r\n        hideBottomNavigation()\r\n        val myActivities = activity as MainActivity\r\n        myActivities.hideMyBottomNav()\r\n        super.onStart()\r\n    }\r\n\r\n    override fun onPause() {\r\n        Log.d(\"TAG\", \"onPause: \")\r\n        hideBottomNavigation()\r\n        val myActivities = activity as MainActivity\r\n        myActivities.hideMyBottomNav()\r\n        super.onPause()\r\n    }\r\n\r\n    override fun onStop() {\r\n        Log.d(\"TAG\", \"onStop: \")\r\n        hideBottomNavigation()\r\n        val myActivities = activity as MainActivity\r\n        myActivities.hideMyBottomNav()\r\n        super.onStop()\r\n    }\r\n\r\n    override fun onDestroyView() {\r\n        Log.d(\"TAG\", \"onDestroyView: \")\r\n        showBottomNavigation()\r\n        super.onDestroyView()\r\n    }\r\n\r\n    override fun onDetach() {\r\n        super.onDetach()\r\n        Log.d(\"TAG\", \"onDetach: \")\r\n    }\r\n\r\n    override fun onAttach(context: Context) {\r\n        super.onAttach(context)\r\n        Log.d(\"TAG\", \"onAttach: \")\r\n    }\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n//        hideBottomNavigation()\r\n        Log.d(\"TAG\", \"onCreate: \")\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/infinity/dsmabsen/ui/fragment/PengajuanReimbursementFragment.kt b/app/src/main/java/com/infinity/dsmabsen/ui/fragment/PengajuanReimbursementFragment.kt
--- a/app/src/main/java/com/infinity/dsmabsen/ui/fragment/PengajuanReimbursementFragment.kt	(revision 844961b02fc63e3b147b871503a54e778a454259)
+++ b/app/src/main/java/com/infinity/dsmabsen/ui/fragment/PengajuanReimbursementFragment.kt	(date 1682491752400)
@@ -155,7 +155,6 @@
         }
     }
 
-
     private fun uploadFiles() {
         val pictureDialog = AlertDialog.Builder(requireContext())
         pictureDialog.setTitle("Select Action")
Index: app/src/main/java/com/infinity/dsmabsen/ui/fragment/AttendanceFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.infinity.dsmabsen.ui.fragment\r\n\r\nimport android.Manifest.permission.*\r\nimport android.app.Activity\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.pm.PackageManager\r\nimport android.graphics.Bitmap\r\nimport android.location.*\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.provider.MediaStore\r\nimport android.provider.Settings\r\nimport android.util.Log\r\nimport android.view.View\r\nimport android.widget.Toast\r\nimport androidx.activity.result.contract.ActivityResultContracts\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AlertDialog\r\nimport androidx.core.app.ActivityCompat\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.core.view.isVisible\r\nimport androidx.fragment.app.viewModels\r\nimport androidx.navigation.fragment.findNavController\r\nimport androidx.navigation.fragment.navArgs\r\nimport com.bumptech.glide.Glide\r\nimport com.infinity.dsmabsen.R\r\nimport com.infinity.dsmabsen.databinding.FragmentAttendanceBinding\r\nimport com.infinity.dsmabsen.helper.*\r\nimport com.infinity.dsmabsen.model.DataX\r\nimport com.infinity.dsmabsen.repository.NetworkResult\r\nimport com.infinity.dsmabsen.ui.viewModel.AttendanceViewModel\r\nimport com.google.android.gms.location.FusedLocationProviderClient\r\nimport com.google.android.gms.location.LocationServices\r\nimport dagger.hilt.android.AndroidEntryPoint\r\nimport io.paperdb.Paper\r\nimport okhttp3.MediaType.Companion.toMediaTypeOrNull\r\nimport okhttp3.MultipartBody\r\nimport okhttp3.RequestBody.Companion.toRequestBody\r\nimport java.io.ByteArrayOutputStream\r\nimport java.io.IOException\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport javax.inject.Inject\r\n\r\n\r\n@AndroidEntryPoint\r\nclass AttendanceFragment :\r\n    BaseFragment<FragmentAttendanceBinding>(FragmentAttendanceBinding::inflate) {\r\n    private lateinit var fusedLocationProviderClient: FusedLocationProviderClient\r\n    private lateinit var locationManager: LocationManager\r\n    private val viewModel: AttendanceViewModel by viewModels()\r\n    private val handler = Handler()\r\n\r\n    private val args by navArgs<AttendanceFragmentArgs>()\r\n    var latittudeUser1: String? = null\r\n    var longitudeUser2: String? = null\r\n    private lateinit var runnable: Runnable\r\n\r\n    @Inject\r\n    lateinit var tokenManager: TokenManager\r\n    private val savedUser = Paper.book().read<DataX>(\"user\")\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n\r\n        super.onViewCreated(view, savedInstanceState)\r\n        hideToolbar()\r\n        timeRun()\r\n\r\n        binding.apply {\r\n            Log.d(\"TAG\", args.hasilScan)\r\n\r\n            btnScanWajah.setOnClickListener {\r\n                findNavController().navigate(R.id.action_attendanceFragment_to_faceScanningFragment3)\r\n            }\r\n            val permission =\r\n                arrayOf(ACCESS_FINE_LOCATION, ACCESS_COARSE_LOCATION, ACCESS_BACKGROUND_LOCATION)\r\n            requestLocationPermission()\r\n            locationManager =\r\n                requireActivity().getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n\r\n            cekGPS()\r\n\r\n            btnAbsen.setOnClickListener {\r\n                camera()\r\n            }\r\n            namaUser.text = savedUser!!.name\r\n            jabatan.text = savedUser!!.nama_jabatan\r\n            Glide.with(requireContext())\r\n                .load(savedUser.image)\r\n                .into(imageUser)\r\n\r\n            Log.d(\"foto\", Constans.IMAGE_URL + savedUser.image)\r\n\r\n            imageUser.setOnClickListener {\r\n                findNavController().navigate(R.id.action_attendanceFragment_to_profileFragment)\r\n            }\r\n            btnRefresh.setOnClickListener {\r\n                cekGPS()\r\n                getLocation()\r\n                enableAbsen()\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        getLocation()\r\n    }\r\n\r\n    private val permissionMultiRequest =\r\n        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { result ->\r\n            var areAllGranted = true\r\n            for (isGranted in result.values) {\r\n//                Toast.makeText(requireContext(), \"Granted is $isGranted\", Toast.LENGTH_SHORT).show()\r\n                areAllGranted = areAllGranted && isGranted\r\n            }\r\n\r\n            if (areAllGranted) {\r\n                val locationListener = object : LocationListener {\r\n                    override fun onLocationChanged(location: Location) {\r\n                        // Do something with the new location\r\n                    }\r\n\r\n                    override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {}\r\n\r\n                    override fun onProviderEnabled(provider: String) {\r\n                        if (provider == LocationManager.GPS_PROVIDER) {\r\n\r\n                        }\r\n                    }\r\n\r\n                    override fun onProviderDisabled(provider: String) {\r\n                    }\r\n                }\r\n                requestLocationPermission()\r\n                locationManager.requestLocationUpdates(\r\n                    LocationManager.GPS_PROVIDER,\r\n                    0,\r\n                    0f,\r\n                    locationListener\r\n                )\r\n\r\n                getLocation()\r\n            } else {\r\n            }\r\n        }\r\n\r\n\r\n    private fun getLocationUser() {\r\n        locationManager =\r\n            requireActivity().getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        fusedLocationProviderClient =\r\n            LocationServices.getFusedLocationProviderClient(requireContext())\r\n        Log.d(\"ambil_lokasi\", \"On2 Proses\")\r\n        val task = fusedLocationProviderClient.lastLocation\r\n        task.addOnSuccessListener {\r\n            if (it != null) {\r\n                with(binding) {\r\n                    latittudeUser1 = it.latitude.toString()\r\n                    longitudeUser2 = it.longitude.toString()\r\n                    lattitudeUser.text = it.latitude.toString()\r\n                    longitudeUser.text = it.longitude.toString()\r\n                }\r\n                enableAbsen()\r\n            } else {\r\n                with(binding) {\r\n                    lattitudeUser.text = \"-\"\r\n                    longitudeUser.text = \"-\"\r\n                }\r\n                disableAbsen()\r\n            }\r\n            Log.d(\"ambil_lokasi\", \"On3 Proses\")\r\n            getAddressAboveSDK29()\r\n        }\r\n    }\r\n\r\n    private fun getLocation() {\r\n        val locationManager =\r\n            requireActivity().getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        locationManager.requestLocationUpdates(\r\n            LocationManager.NETWORK_PROVIDER,\r\n            0L,\r\n            0f,\r\n            locationListener\r\n        )\r\n        Log.d(\"ambil_lokasi\", \"On Proses\")\r\n        getLocationUser()\r\n    }\r\n\r\n    private val locationListener: LocationListener = object : LocationListener {\r\n        override fun onLocationChanged(location: Location) {\r\n            // Mendapatkan latitude dan longitude\r\n            val latitude = location.latitude\r\n            val longitude = location.longitude\r\n\r\n            binding.lattitudeUser.text = latitude.toString()\r\n            binding.longitudeUser.text = longitude.toString()\r\n\r\n        }\r\n\r\n        override fun onStatusChanged(provider: String?, status: Int, extras: Bundle?) {}\r\n        override fun onProviderEnabled(provider: String) {\r\n            getLocationUser()\r\n            enableAbsen()\r\n        }\r\n\r\n        override fun onProviderDisabled(provider: String) {\r\n            cekGPS()\r\n        }\r\n    }\r\n\r\n    override fun onStop() {\r\n        super.onStop()\r\n        locationManager\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun camera() {\r\n        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)\r\n        intent.putExtra(\"android.intent.extras.CAMERA_FACING\", 1)\r\n        putPhoto.launch(intent)\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private val putPhoto =\r\n        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {\r\n            if (it.resultCode == Activity.RESULT_OK) {\r\n\r\n                val selectedImageUris = it?.data?.extras?.get(\"data\") as Bitmap\r\n                absen(selectedImageUris!!)\r\n\r\n            } else if (it == null) {\r\n                Toast.makeText(requireContext(), \"Gambar tidak dapat di set\", Toast.LENGTH_SHORT)\r\n                    .show()\r\n            } else {\r\n                Log.d(\"TAG\", \"Task Cancelled\")\r\n            }\r\n\r\n        }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    private fun absen(uri: Bitmap) {\r\n        val photo = uriToMultipartBody(uri)\r\n        Log.d(\"gambar\", photo.toString())\r\n        val timeNow = getTime()\r\n        val nipRequestBody = MultipartBody.Part.createFormData(\"nip\", savedUser!!.nip)\r\n        val dateRequestBody = MultipartBody.Part.createFormData(\"date\", timeNow)\r\n        val timezoneRequestBody = MultipartBody.Part.createFormData(\"timezone\", \"\")\r\n        val kordinatRequestBody =\r\n            MultipartBody.Part.createFormData(\"kordinat\", \"$latittudeUser1,$longitudeUser2\")\r\n        val kodeShiftRequestBody =\r\n            MultipartBody.Part.createFormData(\"kode_shift\", savedUser?.shift ?: \"\")\r\n        val kodeTingkatRequestBody = MultipartBody.Part.createFormData(\"kode_tingkat\", \"0\")\r\n\r\n        Log.d(\r\n            \"TAG\",\r\n            \"nip :$nipRequestBody date:$dateRequestBody timeZone:$timezoneRequestBody kordinat:$latittudeUser1,$longitudeUser2 kodeshift:$kodeShiftRequestBody kodetingkat:$kodeTingkatRequestBody\"\r\n        )\r\n\r\n        viewModel.attendanceToday2(\r\n            photo,\r\n            nipRequestBody.body,\r\n            dateRequestBody.body,\r\n            timezoneRequestBody.body,\r\n            kordinatRequestBody.body,\r\n            kodeShiftRequestBody.body,\r\n            kodeTingkatRequestBody.body\r\n        )\r\n        viewModel.presensiLiveData.observe(viewLifecycleOwner) {\r\n            when (it) {\r\n                is NetworkResult.Success -> {\r\n                    binding.loadingInclude.loading.visibility = View.GONE\r\n\r\n                    val response = it.data!!\r\n                    val statusServer = response.status\r\n                    val statusPresensi = response.data.status\r\n                    val message = response.data.messages\r\n                    if (statusPresensi == \"Error\") {\r\n                        binding.apply {\r\n                            materialCardView21.isVisible = true\r\n                            notificationUser.isVisible = true\r\n                            informationLayout.isVisible = true\r\n                            notificationUser.text = message\r\n                            informationLayout.setBackgroundColor(\r\n                                ContextCompat.getColor(\r\n                                    requireContext(),\r\n                                    R.color._danger\r\n                                )\r\n                            )\r\n                        }\r\n                    } else {\r\n                        binding.apply {\r\n                            binding.materialCardView21.isVisible = true\r\n                            binding.notificationUser.isVisible = true\r\n                            binding.informationLayout.isVisible = true\r\n                            binding.notificationUser.text = message\r\n                            binding.informationLayout.setBackgroundColor(\r\n                                ContextCompat.getColor(\r\n                                    requireContext(),\r\n                                    R.color._success\r\n                                )\r\n                            )\r\n                        }\r\n                    }\r\n\r\n                }\r\n                is NetworkResult.Loading -> {\r\n                    binding.loadingInclude.loading.visibility = View.VISIBLE\r\n                }\r\n\r\n                is NetworkResult.Error -> {\r\n                    binding.loadingInclude.loading.visibility = View.GONE\r\n                    handleApiError(it.message)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private fun getTime(): String {\r\n        val dateFormat = SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\", Locale.getDefault())\r\n        val date = Date()\r\n        return dateFormat.format(date)\r\n    }\r\n\r\n    private fun uriToMultipartBody(bitmap: Bitmap): MultipartBody.Part {\r\n        val byteArrayOutputStream = ByteArrayOutputStream()\r\n        bitmap.compress(Bitmap.CompressFormat.PNG, 100, byteArrayOutputStream)\r\n        val byteArray = byteArrayOutputStream.toByteArray()\r\n        val requestFile = byteArray.toRequestBody(\"image/png\".toMediaTypeOrNull())\r\n        return MultipartBody.Part.createFormData(\"image\", \"image.png\", requestFile)\r\n    }\r\n\r\n    private val singlePermissionLaunch =\r\n        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted ->\r\n            Log.d(Constans.TAG, \"permission is Granted: $isGranted\")\r\n            if (isGranted) {\r\n                Log.d(\"TAG\", \"permission granted\")\r\n//                Toast.makeText(requireContext(), \"Permission camera is granted\", Toast.LENGTH_SHORT)\r\n//                    .show()\r\n\r\n            } else {\r\n                Log.d(Constans.TAG, \"Permission camera  : Permission Denied \")\r\n//                Toast.makeText(requireContext(), \"Permission camera Denied \", Toast.LENGTH_SHORT)\r\n//                    .show()\r\n            }\r\n        }\r\n\r\n    private fun getAddressAboveSDK29() {\r\n        if (ActivityCompat.checkSelfPermission(\r\n                requireContext(),\r\n                ACCESS_FINE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(\r\n                requireContext(),\r\n                ACCESS_COARSE_LOCATION\r\n            ) != PackageManager.PERMISSION_GRANTED\r\n        ) Log.d(\"ambil_lokasi\", \"On4 Proses\")\r\n        runLoading()\r\n\r\n        fusedLocationProviderClient.lastLocation\r\n            .addOnSuccessListener { location: Location? ->\r\n                try {\r\n                    val provider = LocationManager.NETWORK_PROVIDER\r\n                    val location = locationManager.getLastKnownLocation(provider)\r\n                    if (location != null) {\r\n                        val latitude = location.latitude\r\n                        val longitude = location.longitude\r\n                        val geocoder = Geocoder(requireContext(), Locale.getDefault())\r\n                        val alertDialogHelper = AlertDialogHelper(requireContext())\r\n                        try {\r\n                            val addresses = geocoder.getFromLocation(latitude, longitude, 1)\r\n                            if (addresses != null && addresses.isNotEmpty()) {\r\n                                val address = addresses[0].getAddressLine(0)\r\n                                binding.currentLocation.text = address\r\n//                                enableAbsen()\r\n                            } else {\r\n                                binding.currentLocation.text = \"-\"\r\n//                                disableAbsen()\r\n                                alertDialogHelper.showAlertDialog(\r\n                                    \"Absen\",\r\n                                    \"Lokasi tidak di temukan\"\r\n                                )\r\n                            }\r\n                        } catch (e: IOException) {\r\n                            binding.currentLocation.text = \"-\"\r\n//                            disableAbsen()\r\n                            alertDialogHelper.showAlertDialog(\r\n                                \"Absen\",\r\n                                \"Lokasi tidak di temukan, periksa kembali koneksi anda\"\r\n                            )\r\n                            e.printStackTrace()\r\n                        }\r\n                        stopLoading()\r\n                    } else {\r\n                    }\r\n\r\n                } catch (e: Exception) {\r\n                    Log.d(\"ambil_lokasi\", \"Error : ${e.message}\")\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n    private fun getAddressBelowSDK29() {\r\n        fusedLocationProviderClient.lastLocation\r\n            .addOnSuccessListener { location: Location? ->\r\n                // Mendapatkan alamat pengguna berdasarkan lokasi yang diperoleh\r\n                val geocoder = Geocoder(requireContext(), Locale.getDefault())\r\n\r\n                val addresses = geocoder.getFromLocation(\r\n                    location?.latitude ?: 0.0,\r\n                    location?.longitude ?: 0.0,\r\n                    1\r\n                )\r\n                // Mengambil alamat dari objek Address dan menampilkannya pada TextView\r\n                val address: String? = addresses!![0].getAddressLine(0)\r\n                val city: String? = addresses[0].locality\r\n                val state: String? = addresses[0].adminArea\r\n                val country: String? = addresses[0].countryName\r\n                val postalCode: String? = addresses[0].postalCode\r\n                val knownName: String? = addresses[0].featureName\r\n\r\n                binding.currentLocation.text =\r\n                    \"$address\"\r\n            }\r\n    }\r\n\r\n    private fun isLocationPermissionGranted(): Boolean {\r\n        return ContextCompat.checkSelfPermission(\r\n            requireActivity(),\r\n            ACCESS_FINE_LOCATION\r\n        ) == PackageManager.PERMISSION_GRANTED\r\n    }\r\n\r\n    private fun requestLocationPermission() {\r\n        if (isLocationPermissionGranted()) {\r\n\r\n        }\r\n        if (shouldShowRequestPermissionRationale(ACCESS_FINE_LOCATION)) {\r\n        } else {\r\n            requestPermissionLauncher.launch(ACCESS_FINE_LOCATION)\r\n        }\r\n    }\r\n\r\n    private val requestPermissionLauncher =\r\n        registerForActivityResult(ActivityResultContracts.RequestPermission()) { isGranted: Boolean ->\r\n            if (isGranted) {\r\n                Log.d(\"TAG\", \"Izin lokasi telah diberikan\")\r\n//                Toast.makeText(requireContext(), \"Izin lokasi telah diberikan\", Toast.LENGTH_SHORT)\r\n//                    .show()\r\n            } else {\r\n                Log.d(\"TAG\", \"Izin lokasi ditolak\")\r\n//                Toast.makeText(requireContext(), \"Izin lokasi ditolak\", Toast.LENGTH_SHORT).show()\r\n            }\r\n        }\r\n\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun timeRun() {\r\n\r\n        runnable = object : Runnable {\r\n            override fun run() {\r\n                val timestamp = System.currentTimeMillis()\r\n\r\n                // Create a SimpleDateFormat object with the system timezone\r\n                val sdfHari = SimpleDateFormat(\"dd\", Locale.getDefault())\r\n                val sdfBulan = SimpleDateFormat(\"MM\", Locale.getDefault())\r\n                val sdfTahun = SimpleDateFormat(\"yyyy\", Locale.getDefault())\r\n\r\n                val sdfJam = SimpleDateFormat(\"HH\", Locale.getDefault())\r\n                val sdfMenit = SimpleDateFormat(\"mm\", Locale.getDefault())\r\n                val sdfDetik = SimpleDateFormat(\"ss\", Locale.getDefault())\r\n\r\n                sdfHari.timeZone = TimeZone.getDefault()\r\n                sdfBulan.timeZone = TimeZone.getDefault()\r\n                sdfTahun.timeZone = TimeZone.getDefault()\r\n                sdfJam.timeZone = TimeZone.getDefault()\r\n                sdfMenit.timeZone = TimeZone.getDefault()\r\n                sdfDetik.timeZone = TimeZone.getDefault()\r\n\r\n                // Format the timestamp with the SimpleDateFormat object\r\n                val formattedDateJam = sdfJam.format(Date(timestamp))\r\n                val formattedDateMenit = sdfMenit.format(Date(timestamp))\r\n                val formattedDateDetik = sdfDetik.format(Date(timestamp))\r\n//                Log.d(\"run jam\", \"Formatted date with system timezone: $formattedDate\")\r\n\r\n//                val currentTime = System.currentTimeMillis()\r\n//                val seconds = (currentTime / 1000) % 60\r\n//                val minutes = (currentTime / (1000 * 60)) % 60\r\n//                val hours = (currentTime / (1000 * 60 * 60)) % 24\r\n                binding.tvTime.text =\r\n                    \"$formattedDateJam : $formattedDateMenit : $formattedDateDetik\"\r\n\r\n\r\n//                binding.textView3.text = formattedDate\r\n//                textViewa.text = String.format(\"%02d:%02d:%02d\", hours, minutes, seconds)\r\n                binding.tvHari.text = sdfHari.format(Date(timestamp))\r\n                binding.tvBulan.text = sdfBulan.format(Date(timestamp))\r\n                binding.tvTahun.text = sdfTahun.format(Date(timestamp))\r\n                handler.postDelayed(this, 1000)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun cekGPS() {\r\n        // Cek apakah GPS sedang aktif\r\n        val isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)\r\n        if (!isGpsEnabled) {\r\n            // GPS tidak aktif, tampilkan dialog untuk meminta pengguna mengaktifkannya\r\n            val builder = AlertDialog.Builder(requireContext())\r\n            builder.setMessage(\"GPS tidak aktif, aktifkan GPS?\")\r\n                .setCancelable(false)\r\n                .setPositiveButton(\"Ya\") { _, _ ->\r\n                    startActivity(Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS))\r\n                    enableAbsen()\r\n                }\r\n                .setNegativeButton(\"Tidak\") { dialog, _ ->\r\n                    disableAbsen()\r\n                    dialog.cancel()\r\n                }\r\n            val alert = builder.create()\r\n            alert.show()\r\n        }\r\n    }\r\n\r\n\r\n    fun mematikanGPS() {\r\n        val locationManager =\r\n            requireActivity().getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)?.let { isGPSOn ->\r\n            if (isGPSOn) {\r\n                val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)\r\n                startActivity(intent)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun menyalakanGPS() {\r\n        val locationManager =\r\n            requireActivity().getSystemService(Context.LOCATION_SERVICE) as LocationManager\r\n        locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)?.let { isGPSOn ->\r\n            if (!isGPSOn) {\r\n                val intent = Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS)\r\n                startActivity(intent)\r\n            }\r\n        }\r\n    }\r\n\r\n    fun enableAbsen() {\r\n        binding.imgFinger.background = resources.getDrawable(R.color._danger)\r\n        binding.btnAbsen.isClickable = true\r\n    }\r\n\r\n    private fun disableAbsen() {\r\n        binding.imgFinger.background = resources.getDrawable(R.color._grey)\r\n        binding.btnAbsen.isClickable = false\r\n    }\r\n\r\n    override fun onResume() {\r\n        super.onResume()\r\n        handler.postDelayed(runnable, 0)\r\n    }\r\n\r\n    override fun onPause() {\r\n        super.onPause()\r\n        handler.removeCallbacks(runnable)\r\n    }\r\n\r\n    fun runLoading() {\r\n        binding.searchLocationLoading.visibility = View.VISIBLE\r\n    }\r\n\r\n    fun stopLoading() {\r\n        binding.searchLocationLoading.visibility = View.GONE\r\n        binding.searchLocationLoading.cancelAnimation()\r\n    }\r\n\r\n    override fun onConnectionAvailable() {\r\n        super.onConnectionAvailable()\r\n        binding.apply {\r\n            toolbar.toolbar.visibility = View.GONE\r\n            rcycleview.visibility = View.VISIBLE\r\n            noInternetConnection.ivNoConnection.visibility = View.GONE\r\n        }\r\n    }\r\n\r\n    override fun onConnectionLost() {\r\n        super.onConnectionLost()\r\n        binding.apply {\r\n            toolbar.toolbar.visibility = View.GONE\r\n            rcycleview.visibility = View.GONE\r\n            noInternetConnection.ivNoConnection.visibility = View.VISIBLE\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/infinity/dsmabsen/ui/fragment/AttendanceFragment.kt b/app/src/main/java/com/infinity/dsmabsen/ui/fragment/AttendanceFragment.kt
--- a/app/src/main/java/com/infinity/dsmabsen/ui/fragment/AttendanceFragment.kt	(revision 844961b02fc63e3b147b871503a54e778a454259)
+++ b/app/src/main/java/com/infinity/dsmabsen/ui/fragment/AttendanceFragment.kt	(date 1682491752408)
@@ -224,7 +224,6 @@
         putPhoto.launch(intent)
     }
 
-    @RequiresApi(Build.VERSION_CODES.O)
     private val putPhoto =
         registerForActivityResult(ActivityResultContracts.StartActivityForResult()) {
             if (it.resultCode == Activity.RESULT_OK) {
